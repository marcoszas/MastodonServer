---
- name: Initial ip configuration
  hosts: "192.168.122.222"
  become: true
  # We need to investigate a method for making sure the user is happy with the input they've provided.
  vars_prompt:
    - name: server_hostname
      prompt: "Enter the server hostname: "
      private: false

  tasks:
    - name: List external interfaces
      ansible.builtin.command: ip -br a
      register: ip_output
      changed_when: false

    - name: Extract external interfaces
      ansible.builtin.set_fact:
        external_interfaces: "{{ ip_output.stdout_lines | select('match', '.*\\s+UP\\s+.*') | map('regex_replace', '^([^\\s]+).*$', '\\1') | list }}"

    - name: Configure firewall
      ansible.posix.firewalld:
        zone: public
        interface: "{{ external_interfaces }}"
        permanent: true
        state: enabled
      # ansible.builtin.command: "sudo firewall-cmd --add-interface {{ item }} --zone public"
      # loop: "{{ external_interfaces }}"

    - name: Enable http service
      ansible.posix.firewalld:
        zone: public
        service: http
        permanent: true
        state: enabled
      # ansible.builtin.command: sudo firewall-cmd --add-service http --add-service https --zone public

    - name: Enable https service
      ansible.posix.firewalld:
        zone: public
        service: https
        permanent: true
        state: enabled

    - name: Ensure that docker interface is in a trusted zone
      ansible.posix.firewalld:
        zone: trusted
        interface: docker0
        permanent: true
        state: enabled
      # ansible.builtin.command: sudo firewall-cmd --add-interface=docker0 --zone trusted

    - name: Add masquerade
      ansible.posix.firewalld:
        zone: public
        masquerade: true
        permanent: true
        state: enabled
      # ansible.builtin.command: sudo firewall-cmd --zone=public --add-masquerade

    # - name: Make changes permanent
    #   ansible.builtin.command: sudo firewall-cmd --runtime-to-permanent

    # TODO: Make sure to check most of the commands with changed_when to avoid problems
    - name: Define server hostname
      ansible.builtin.command: "sudo hostnamectl --static set-hostname {{ server_hostname }}"

    - name: Increase limit of mmap counts
      ansible.builtin.shell: echo "vm.max_map_count=262144" | sudo tee /etc/sysctl.d/90-max_map_count.conf

    - name: Apply changes of limit in mmpa counts
      ansible.builtin.command: sudo sysctl --system

    - name: Create application directory
      ansible.builtin.file:
        path: /opt/mastodon
        state: directory
        recurse: true # This allows the creation of the parent directories if they don't exist

    - name: Create directories related to database operations (PostgreSQL)
      ansible.builtin.file:
        path: /opt/mastodon/database/postgresql
        state: directory
        recurse: true

    - name: Create directories related to database operations (Redis)
      ansible.builtin.file:
        path: /opt/mastodon/database/redis
        state: directory
        recurse: true

    - name: Create directories related to database operations (elasticsearch)
      ansible.builtin.file:
        path: /opt/mastodon/database/elasticsearch
        state: directory
        mode: 1000 # This changes the permissions in the directory
        recurse: true

    - name: Create directories related to web operations (public).
      ansible.builtin.file:
        path: /opt/mastodon/web/public
        state: directory
        mode: 991
        recurse: true

    - name: Create directories related to web operations (system).
      ansible.builtin.file:
        path: /opt/mastodon/web/system
        state: directory
        mode: 991
        recurse: true

    - name: Copy docker-compose file into the corresponding system directory
      ansible.builtin.copy:
        src: ../docker-compose.yml
        dest: /opt/mastodon/docker-compose.yml

    - name: Generate SECRET_KEY_BASE secret
      ansible.builtin.command: openssl rand -hex 64
      register: secret_key_base

    - name: Generate OTP_SECRET secret
      ansible.builtin.command: openssl rand -hex 64
      register: otp_secret

    - name: Generate VAPID_PRIVATE_KEY
      ansible.builtin.command: openssl ecparam -name prime256v1 -genkey -noout -out vapid_private_key.pem

    - name: Generate VAPID_PUBLIC_KEY
      ansible.builtin.command: openssl ec -in vapid_private_key.pem -pubout -out vapid_public_key.pem

    - name: Trim generated VAPID_PRIVATE_KEY
      ansible.builtin.shell: |
        cat vapid_private_key.pem | sed -e "1 d" -e "$ d" | tr -d "\n"
        echo
      register: vapid_private_key

    - name: Trim generate VAPID_PUBLIC_KEY
      ansible.builtin.shell: |
        cat vapid_public_key.pem | sed -e "1 d" -e "$ d" | tr -d "\n"
        echo
      register: vapid_public_key

    - name: Generate PostgreSQL secret
      ansible.builtin.command: openssl rand -hex 15
      register: postgresql_secret

    - name: Generate elasticsearch secret
      ansible.builtin.command: openssl rand -hex 15
      register: elasticsearch_secret

    - name: Create file to store secrets
      ansible.builtin.file:
        path: /opt/mastodon/secrets.txt
        state: touch

    - name: Store generated secrets in the secrets file (SECRET_KEY_BASE)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/secrets.txt
        line: "SECRET_KEY_BASE={{ secret_key_base.stdout_lines }}"
        regexp: '^SECRET_KEY_BASE='
        state: present

    - name: Store generated secrets in the secrets file (OTP_SECRET)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/secrets.txt
        line: "OTP_SECRET={{ otp_secret.stdout_lines }}"
        regexp: '^OTP_SECRET='
        state: present

    - name: Store generated secrets in the secrets file (VAPID_PRIVATE_KEY)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/secrets.txt
        line: "VAPID_PRIVATE_KEY={{ vapid_private_key.stdout_lines }}"
        regexp: '^VAPID_PRIVATE_KEY='
        state: present

    - name: Store generated secrets in the secrets file (VAPID_PUBLIC_KEY)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/secrets.txt
        line: "VAPID_PUBLIC_KEY={{ vapid_public_key.stdout_lines }}"
        regexp: '^VAPID_PUBLIC_KEY='
        state: present

    - name: Store generated secrets in the secrets file (POSTGRESQL_SECRET)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/secrets.txt
        line: "POSTGRESQL_SECRET={{ postgresql_secret.stdout_lines }}"
        regexp: '^POSTGRESQL_SECRET='
        state: present

    - name: Store generated secrets in the secrets file (ELASTICSEARCH_SECRET)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/secrets.txt
        line: "ELASTICSEARCH_SECRET={{ elasticsearch_secret.stdout_lines }}"
        regexp: '^ELASTICSEARCH_SECRET='
        state: present

    - name: Generate database URL
      ansible.builtin.set_fact:
        database_url: "postgres://mastodon:{{ postgresql_secret.stdout_lines }}@postgresql:5432/mastodon_production"

    - name: Initialize empty application configuration (application.env)
      ansible.builtin.file:
        path: /opt/mastodon/application.env
        state: touch

    - name: Initialize empty application configuration (database.env)
      ansible.builtin.file:
        path: /opt/mastodon/database.env
        state: touch

    - name: Populate application.env file with basic configuration template
      ansible.builtin.copy:
        src: ../ConfigurationsTemplates/application_template.txt
        dest: /opt/mastodon/application.env

    - name: Populate database.env file with basic configuration template
      ansible.builtin.copy:
        src: ../ConfigurationsTemplates/database_template.txt
        dest: /opt/mastodon/database.env

    - name: Set generated values in the application.env configuration file (SECRET_KEY_BASE)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/application.env
        line: "SECRET_KEY_BASE={{ secret_key_base.stdout_lines }}"
        regexp: '^SECRET_KEY_BASE='
        state: present

    - name: Set generated values in the application.env configuration file (OTP_SECRET)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/application.env
        line: "OTP_SECRET={{ otp_secret.stdout_lines }}"
        regexp: '^OTP_SECRET='
        state: present

    - name: Set generated values in the application.env configuration file (VAPID_PRIVATE_KEY)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/application.env
        line: "VAPID_PRIVATE_KEY={{ vapid_private_key.stdout_lines }}"
        regexp: '^VAPID_PRIVATE_KEY='
        state: present

    - name: Set generated values in the application.env configuration file (VAPID_PUBLIC_KEY)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/application.env
        line: "VAPID_PUBLIC_KEY={{ vapid_public_key.stdout_lines }}"
        regexp: '^VAPID_PUBLIC_KEY='
        state: present

    - name: Set generated values in the application.env configuration file (POSTGRESQL_SECRET)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/database.env
        line: "POSTGRESQL_PASSWORD={{ postgresql_secret.stdout_lines }}"
        regexp: '^POSTGRES_PASSWORD='
        state: present

    - name: Set generated values in the application.env configuration file (Mastodon Database Password)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/database.env
        line: "DB_PASS={{ postgresql_secret.stdout_lines }}"
        regexp: '^DB_PASS='
        state: present

    - name: Set generated values in the application.env configuration file (ELASTICSEARCH_SECRET)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/database.env
        line: "ELASTICSEARCH_PASSWORD={{ elasticsearch_secret.stdout_lines }}"
        regexp: '^ELASTICSEARCH_PASSWORD='
        state: present

    - name: Set generated values in the application.env configuration file (Mastodon Elasticsearch Password)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/database.env
        line: "ELASTICSEARCH_PASSWORD={{ elasticsearch_secret.stdout_lines }}"
        regexp: '^ES_PASS='
        state: present

    - name: Set generated values in the application.env configuration file (Database url)
      ansible.builtin.lineinfile:
        path: /opt/mastodon/database.env
        line: "#DATABASE_URL={{ database_url }}"
        regexp: '^#DATABASE_URL='
        state: present
