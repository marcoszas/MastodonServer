---
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

- name: Upgrade packages
  ansible.builtin.apt:
    upgrade: true

- name: Install acl
  ansible.builtin.apt:
    name: acl
    state: present

- name: Install Fail2ban
  ansible.builtin.apt:
    name: fail2ban
    state: present
    allow_downgrade: true

- name: Install firewall (iptables)
  ansible.builtin.apt:
    name: iptables-persistent
    state: present
    allow_downgrade: true

- name: Install curl
  ansible.builtin.apt:
    name: curl
    state: present
    allow_downgrade: true

- name: Install wget
  ansible.builtin.apt:
    name: wget
    state: present
    allow_downgrade: true

- name: Install gnupg
  ansible.builtin.apt:
    name: gnupg
    state: present
    allow_downgrade: true

- name: Install apt-transport-https
  ansible.builtin.apt:
    name: apt-transport-https
    state: present
    allow_downgrade: true

- name: Install lsb-release
  ansible.builtin.apt:
    name: lsb-release
    state: present
    allow_downgrade: true

- name: Install ca-certificates
  ansible.builtin.apt:
    name: ca-certificates
    state: present
    allow_downgrade: true

- name: Create keyring directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: u=rwx,g=rwx,o=rx

- name: Create keyring file for nodesource
  ansible.builtin.file:
    path: /etc/apt/keyrings/nodesource.gpg
    state: touch
    mode: u=rw,g=rw,o=r

- name: Install Node.js
  ansible.builtin.apt_key:
    url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
    state: present
    keyring: /etc/apt/keyrings/nodesource.gpg

- name: Add NodeSource repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main"
    state: present
    filename: nodesource.list

- name: Create keyring file for postgresql
  ansible.builtin.file:
    path: /usr/share/keyrings/postgresql.asc
    state: touch
    mode: u=rw,g=rw,o=r

- name: Install PostgreSQL
  ansible.builtin.apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present
    keyring: /usr/share/keyrings/postgresql.asc

- name: Add PostgreSQL repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/postgresql.asc] http://apt.postgresql.org/pub/repos/apt focal-pgdg main"
    state: present
    filename: postgresql.list

- name: Install Elasticsearch
  ansible.builtin.include_tasks: install_elasticsearch.ansible.yml

- name: Install system packages
  ansible.builtin.apt:
    pkg:
      - imagemagick
      - ffmpeg
      - libpq-dev
      - libxml2-dev
      - libxslt1-dev
      - file
      - git-core
      - g++
      - libprotobuf-dev
      - protobuf-compiler
      - pkg-config
      - gcc
      - autoconf
      - bison
      - build-essential
      - libssl-dev
      - libyaml-dev
      - libreadline6-dev
      - zlib1g-dev
      - libncurses5-dev
      - libffi-dev
      - libgdbm-dev
      - nginx
      - nodejs
      - redis-server
      - redis-tools
      - postgresql
      - postgresql-contrib
      - certbot
      - python3-certbot-nginx
      - python3-pip
      - libidn11-dev
      - libicu-dev
      - libjemalloc-dev
    state: present

- name: Install psycopg2 for PostgreSQL control
  ansible.builtin.pip:
    name: psycopg2
    state: present

- name: Install pexpect pip module for interactive prompts
  ansible.builtin.pip:
    name: pexpect
    state: present

- name: Enable corepack
  ansible.builtin.command:
    cmd: 'corepack enable'
  changed_when: false

- name: Set Yarn
  ansible.builtin.shell:
    cmd: y | yarn set version classic
  changed_when: false

- name: Add Mastodon user
  become: true
  become_user: root
  ansible.builtin.user:
    name: mastodon
    shell: /bin/bash
    state: present

# We have to use become_user to change the user the task is being executed on.
- name: Clone Ruby environment (rbenv)
  become: true
  become_user: mastodon
  ansible.builtin.git:
    repo: https://github.com/rbenv/rbenv.git
    dest: /home/mastodon/.rbenv
    version: "{{ mastodon_rbenv_version }}"

- name: Create .bashrc file in the mastodon user home
  ansible.builtin.file:
    state: touch
    path: /home/mastodon/.bashrc
    mode: u=rwx,g=rwx,o=r

- name: Add rbenv to the PATH
  become: true
  become_user: mastodon
  ansible.builtin.lineinfile:
    path: /home/mastodon/.bashrc
    line: '{{ item }}'
  with_items:
    - 'export PATH="$HOME/.rbenv/bin:$PATH"'
    - 'eval "$(rbenv init -)"'
    - 'export RAILS_ENV="production"'

- name: Reload shell
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: . /home/mastodon/.bashrc
    executable: /bin/bash
  changed_when: false

- name: Install Ruby environment build (rbenv-build)
  become: true
  become_user: mastodon
  ansible.builtin.git:
    repo: https://github.com/rbenv/ruby-build.git
    dest: /home/mastodon/.rbenv/plugins/ruby-build
    version: "{{ mastodon_rbenv_build_version }}"

- name: Check if Ruby is installed
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: bash -ilc 'rbenv versions --bare'
    executable: /bin/bash
  register: ruby_versions
  changed_when: false

- name: Check if Ruby version is present
  ansible.builtin.set_fact:
    ruby_installed: "{{ mastodon_ruby_version in ruby_versions.stdout_lines }}"

- name: Install Ruby
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: "bash -ilc 'RUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install {{ mastodon_ruby_version }} --skip-existing'"
    executable: "/bin/bash"
  when: not ruby_installed
  changed_when: not ruby_installed

- name: Select Ruby version
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: "bash -ilc 'rbenv global {{ mastodon_ruby_version }}'"
    executable: /bin/bash
  when: not ruby_installed
  changed_when: not ruby_installed

- name: Install the bundler
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: "bash -ilc 'gem install bundler --no-document'"
    executable: /bin/bash
  changed_when: not ruby_installed

- name: Install Mastodon source code
  become: true
  become_user: mastodon
  ansible.builtin.git:
    repo: https://github.com/mastodon/mastodon.git
    dest: /home/mastodon/live
    force: true
    version: '{{ mastodon_version }}'

- name: Configure bundler for production deployment
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: "bash -ilc 'bundle config deployment 'true''"
    executable: '/bin/bash'
    chdir: /home/mastodon/live
  changed_when: false

- name: Skip the installation of development and test bundles
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: "bash -ilc 'bundle config without 'development test''"
    executable: /bin/bash
    chdir: /home/mastodon/live
  changed_when: false

- name: Install bundle dependencies
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: "bash -ilc 'bundle install -j$(getconf _NPROCESSORS_ONLN)'"
    executable: /bin/bash
    chdir: /home/mastodon/live
  changed_when: false

- name: Install Ruby and JavaScript dependencies
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: y | yarn install --pure-lockfile
    chdir: /home/mastodon/live
  changed_when: false
