---
# TODO: Now we'll need to secure the machine first by editing the SSH config

# If this task is executed without having the ssh key properly configured the access to the machine is revoked.
# - name: Disable password authentication in the host machine
#   ansible.builtin.lineinfile:
#     path: /etc/ssh/ssh_config
#     regexp: '#PasswordAuthentication'
#     line: '#PasswordAuthentication no'
#     state: present

- name: Restart ssh_service to apply changes
  ansible.builtin.systemd_service:
    name: ssh.service
    state: restarted
    daemon_reload: true

- name: Configure Fail2ban
  ansible.builtin.template:
    src: roles/mastodon/templates/fail2ban_template.j2
    dest: /etc/fail2ban/jail.local
    mode: u=rw,g=r,o=r

- name: Restart Fail2ban service to apply changes
  ansible.builtin.systemd_service:
    name: fail2ban
    state: restarted
    daemon_reload: true

- name: Copy iptables configuration for ipv4
  ansible.builtin.copy:
    src: roles/mastodon/files/iptables-ipv4
    dest: /etc/iptables/rules.v4
    mode: u=rw,g=r,o=r

- name: Apply ipv4 configuration to iptables
  ansible.builtin.shell:
    cmd: iptables-restore < /etc/iptables/rules.v4

- name: Copy iptables configuration for ipv6
  ansible.builtin.copy:
    src: roles/mastodon/files/iptables-ipv6
    dest: /etc/iptables/rules.v6
    mode: u=rw,g=r,o=r

# TODO: See why the applied configuration is failing, if it causes to much problem, we can just ignore this anyway.
# - name: Apply ipv6 configuration to iptables
#   ansible.builtin.shell:
#     cmd: iptables-restore < /etc/iptables/rules.v6

- name: Configure PostgreSQL
  ansible.builtin.include_tasks: postgresql_configuration.ansible.yml

- name: Generate secrets
  ansible.builtin.include_tasks: secrets_config.ansible.yml
  when: mastodon_generate_secrets

- name: Configure Mastodon | Copy template file into the target host
  ansible.builtin.template:
    src: roles/mastodon/templates/env.production.config.j2
    dest: /home/mastodon/live/.env.production
    owner: mastodon
    mode: u=rw,g=rw,o=r
  when: mastodon_generate_secrets

# TODO: Some mechanism needs to be created to avoid launching this tasks if the database has been created already, otherwise they'll fail.
- name: Configure Mastodon | Create database schema
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: bash -ilc 'bin/rails db:setup'
    executable: /bin/bash
    chdir: /home/mastodon/live

- name: Configure Mastodon | Create database
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: bash -ilc 'bin/rails db:create'
    executable: /bin/bash
    chdir: /home/mastodon/live

- name: Configure Mastodon | Run assets precompilation
  become: true
  become_user: mastodon
  ansible.builtin.shell:
    cmd: bash -ilc 'bin/rails assets:precompile'
    executable: /bin/bash
    chdir: /home/mastodon/live

# TODO: This should be done using a certificate module since the command is interactive and could potentially generate incorrect configurations.
- name: Generate certificate
  become: true
  ansible.builtin.shell:
    cmd: "certbot certonly --nginx -d {{ mastodon_server_domain }}"

- name: Create Nginx configuration
  ansible.builtin.template:
    src: roles/mastodon/templates/nginx_config.j2
    dest: /etc/nginx/sites-available/mastodon

- name: Create link for nginx configuration
  ansible.builtin.file:
    src: /etc/nginx/sites-available/mastodon
    dest: /etc/nginx/sites-enabled/mastodon
    state: link

- name: Remove leftover file for Nginx
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Restart Nginx service
  ansible.builtin.systemd_service:
    name: nginx
    state: restarted
    daemon_reload: true

- name: Copy systemd service templates from the Mastodon directory
  ansible.builtin.copy:
    remote_src: true
    src: /home/mastodon/live/dist/mastodon-sidekiq.service
    dest: /etc/systemd/system/

- name: Copy systemd service templates from the Mastodon directory
  ansible.builtin.copy:
    remote_src: true
    src: /home/mastodon/live/dist/mastodon-streaming.service
    dest: /etc/systemd/system/

- name: Copy systemd service templates from the Mastodon directory
  ansible.builtin.copy:
    remote_src: true
    src: /home/mastodon/live/dist/mastodon-streaming@.service
    dest: /etc/systemd/system/

- name: Copy systemd service templates from the Mastodon directory
  ansible.builtin.copy:
    remote_src: true
    src: /home/mastodon/live/dist/mastodon-web.service
    dest: /etc/systemd/system/

- name: Start Mastodon services
  ansible.builtin.systemd_service:
    daemon_reload: true
    enabled: true
    name: "{{ item }}"
    state: started
  with_items:
    - mastodon-web
    - mastodon-sidekiq
    - mastodon-streaming

- name: Create Elasticsearch idices and fill them
  ansible.builtin.shell:
    cmd: bash -ilc 'bin/tootctl search deploy'
    executable: /bin/bash
    chdir: /home/mastodon/live
