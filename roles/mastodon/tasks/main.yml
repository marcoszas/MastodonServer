---
- include_tasks: install_dependencies.ansible.yml

- name: List external interfaces
  ansible.builtin.command: ip -br a
  register: ip_output
  changed_when: false

- name: Extract external interfaces
  ansible.builtin.set_fact:
    external_interfaces: "{{ ip_output.stdout_lines | select('match', '.*\\s+UP\\s+.*') | map('regex_replace', '^([^\\s]+).*$', '\\1') | list }}"

- name: Configure firewall
  ansible.posix.firewalld:
    zone: public
    interface: "{{ external_interfaces }}"
    permanent: true
    state: enabled

- name: Enable http service
  ansible.posix.firewalld:
    zone: public
    service: http
    permanent: true
    state: enabled

- name: Enable https service
  ansible.posix.firewalld:
    zone: public
    service: https
    permanent: true
    state: enabled

- name: Ensure that docker interface is in a trusted zone
  ansible.posix.firewalld:
    zone: trusted
    interface: docker0
    permanent: true
    state: enabled

- name: Add masquerade
  ansible.posix.firewalld:
    zone: public
    masquerade: true
    permanent: true
    state: enabled

# TODO: Make sure to check most of the commands with changed_when to avoid problems
- name: Define server hostname
  ansible.builtin.command: "sudo hostnamectl --static set-hostname {{ mastodon_server_hostname }}"

- name: Increase limit of mmap counts
  ansible.builtin.shell: echo "vm.max_map_count=262144" | sudo tee /etc/sysctl.d/90-max_map_count.conf

- name: Apply changes of limit in mmpa counts
  ansible.builtin.command: sudo sysctl --system

- name: Create application directory
  ansible.builtin.file:
    path: /opt/mastodon
    state: directory
    recurse: true # This allows the creation of the parent directories if they don't exist

- name: Create directories related to database operations (PostgreSQL)
  ansible.builtin.file:
    path: /opt/mastodon/database/postgresql
    state: directory
    recurse: true

- name: Create directories related to database operations (Redis)
  ansible.builtin.file:
    path: /opt/mastodon/database/redis
    state: directory
    recurse: true

- name: Create directories related to database operations (elasticsearch)
  ansible.builtin.file:
    path: /opt/mastodon/database/elasticsearch
    state: directory
    mode: 1000 # This changes the permissions in the directory
    recurse: true

- name: Create directories related to web operations (public).
  ansible.builtin.file:
    path: /opt/mastodon/web/public
    state: directory
    mode: 991
    recurse: true

- name: Create directories related to web operations (system).
  ansible.builtin.file:
    path: /opt/mastodon/web/system
    state: directory
    mode: 991
    recurse: true

- name: Copy docker-compose file into the corresponding system directory
  ansible.builtin.copy:
    src: ../files/docker-compose.yml
    dest: /opt/mastodon/docker-compose.yml

- name: Generate SECRET_KEY_BASE secret
  ansible.builtin.command: openssl rand -hex 64
  register: secret_key_base

- name: Generate OTP_SECRET secret
  ansible.builtin.command: openssl rand -hex 64
  register: otp_secret

- name: Generate VAPID_PRIVATE_KEY
  ansible.builtin.command: openssl ecparam -name prime256v1 -genkey -noout -out vapid_private_key.pem

- name: Generate VAPID_PUBLIC_KEY
  ansible.builtin.command: openssl ec -in vapid_private_key.pem -pubout -out vapid_public_key.pem

- name: Trim generated VAPID_PRIVATE_KEY
  ansible.builtin.shell: |
    cat vapid_private_key.pem | sed -e "1 d" -e "$ d" | tr -d "\n"
    echo
  register: vapid_private_key

- name: Trim generate VAPID_PUBLIC_KEY
  ansible.builtin.shell: |
    cat vapid_public_key.pem | sed -e "1 d" -e "$ d" | tr -d "\n"
    echo
  register: vapid_public_key

- name: Generate PostgreSQL secret
  ansible.builtin.command: openssl rand -hex 15
  register: postgresql_secret

- name: Generate elasticsearch secret
  ansible.builtin.command: openssl rand -hex 15
  register: elasticsearch_secret

- name: Create file to store secrets
  ansible.builtin.file:
    path: /opt/mastodon/secrets.txt
    state: touch

- name: Store generated secrets in the secrets file (SECRET_KEY_BASE)
  ansible.builtin.lineinfile:
    path: /opt/mastodon/secrets.txt
    line: "SECRET_KEY_BASE={{ secret_key_base.stdout_lines[0] }}"
    regexp: '^SECRET_KEY_BASE='
    state: present

- name: Store generated secrets in the secrets file (OTP_SECRET)
  ansible.builtin.lineinfile:
    path: /opt/mastodon/secrets.txt
    line: "OTP_SECRET={{ otp_secret.stdout_lines[0] }}"
    regexp: '^OTP_SECRET='
    state: present

- name: Store generated secrets in the secrets file (VAPID_PRIVATE_KEY)
  ansible.builtin.lineinfile:
    path: /opt/mastodon/secrets.txt
    line: "VAPID_PRIVATE_KEY={{ vapid_private_key.stdout_lines[0] }}"
    regexp: '^VAPID_PRIVATE_KEY='
    state: present

- name: Store generated secrets in the secrets file (VAPID_PUBLIC_KEY)
  ansible.builtin.lineinfile:
    path: /opt/mastodon/secrets.txt
    line: "VAPID_PUBLIC_KEY={{ vapid_public_key.stdout_lines[0] }}"
    regexp: '^VAPID_PUBLIC_KEY='
    state: present

- name: Store generated secrets in the secrets file (POSTGRESQL_SECRET)
  ansible.builtin.lineinfile:
    path: /opt/mastodon/secrets.txt
    line: "POSTGRESQL_SECRET={{ postgresql_secret.stdout_lines[0] }}"
    regexp: '^POSTGRESQL_SECRET='
    state: present

- name: Store generated secrets in the secrets file (ELASTICSEARCH_SECRET)
  ansible.builtin.lineinfile:
    path: /opt/mastodon/secrets.txt
    line: "ELASTICSEARCH_SECRET={{ elasticsearch_secret.stdout_lines[0] }}"
    regexp: '^ELASTICSEARCH_SECRET='
    state: present

- name: Generate database URL
  ansible.builtin.set_fact:
    database_url: "postgres://mastodon:{{ postgresql_secret.stdout_lines[0] }}@postgresql:5432/mastodon_production"

- name: Initialize empty application configuration (application.env)
  ansible.builtin.file:
    path: /opt/mastodon/application.env
    state: touch

- name: Generate application.env file based on template
  ansible.builtin.template:
    src: ../templates/application_template.j2
    dest: /opt/mastodon/application.env

- name: Initialize empty application configuration (database.env)
  ansible.builtin.file:
    path: /opt/mastodon/database.env
    state: touch

- name: Generate database.env file based on template
  ansible.builtin.template:
    src: ../templates/database_template.j2
    dest: /opt/mastodon/database.env

- name: Create temporary volume
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker volume create --opt type=none --opt device=/opt/mastodon/web/public --opt o=bind temporary_static'
  # community.docker.docker_volume:
  #   name: temporary_static
  #   state: present
  #   driver_options:
  #     type: none
  #     device: /opt/mastodon/web/public
  #     o: bind

- name: Create container to copy static files
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker run --rm -v "temporary_static:/static" tootsuite/mastodon:v4.0.2 bash -c "cp -r /opt/mastodon/public/* /static/"'
  # community.docker.docker_container:
  #   name: temporary_container
  #   image: tootsuite/mastodon:v4.0.2
  #   volumes:
  #     - /temporary_static:/static
  #   state: started
  #   # container_default_behavior: compatibility
  #   # command: cp -r /opt/mastodon/web/public/* /static/
  #   detach: true
  #   # auto_remove: true

# - name: Copy static files
#   become: true
#   community.docker.docker_container_exec:
#     container: temporary_container
#     command: "/bin/bash cp -r /opt/mastodon/web/public/* /static/"

# - name: Remove temporary volume
#   become: true
#   ansible.builtin.command:
#     cmd: 'sudo docker volume rm temporary_static'
  # community.docker.docker_volume:
  #   name: temporary_static
  #   state: absent

- name: Disable default virtual host
  become: true
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Create sites-enabled directory again
  become: true
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled
    state: directory
    recurse: true

- name: Create a directory for SSL certificates
  become: true
  ansible.builtin.file:
    path: /etc/nginx/ssl
    state: directory
    recurse: true

- name: Create certificate and private key for Nginx # Still need to define certain configuration values for this meanwhile we'll use simple command.
  become: true
  ansible.builtin.command:
    cmd: 'sudo openssl req -subj "/commonName=example.org/" -x509 -nodes -days 730 -newkey rsa:2048 -keyout /etc/nginx/ssl/{{ mastodon_server_hostname }}.key -out /etc/nginx/ssl/{{ mastodon_server_hostname }}.crt'

- name: Create virtual host
  become: true
  ansible.builtin.template:
    src: ../templates/mastodon_nginx_config.j2
    dest: /etc/nginx/sites-available/mastodon

- name: Enable virtual host # Should try to do it with ansible.builtin.file
  become: true
  ansible.builtin.command:
    cmd: 'sudo ls -s /etc/nginx/sites-available/mastodon /etc/nginx/sites-enabled'

- name: Restart web server
  become: true
  ansible.builtin.systemd_service:
    name: nginx
    state: restarted

- name: Pull docker-compose images
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker-compose -f /opt/mastodon/docker-compose.yml pull'

- name: Create mastodon service file
  become: true
  ansible.builtin.copy:
    src: ../files/mastodon.service
    dest: /etc/systemd/system/mastodon.service

- name: Reload daemons
  become: true
  ansible.builtin.systemd_service:
    daemon_reload: true
