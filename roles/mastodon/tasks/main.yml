---
- name: Install all necessary dependencies
  ansible.builtin.include_tasks: install_dependencies.ansible.yml
  when: mastodon_install_dependencies

- name: Perform necssary configurations in order to run the following tasks
  ansible.builtin.include_tasks: initial_configuration.ansible.yml
  when: mastodon_perform_initial_config

# TODO: Make sure to check most of the commands with changed_when to avoid problems

- name: Increase limit of mmap counts
  become: true
  ansible.builtin.shell: echo "vm.max_map_count=262144" | sudo tee /etc/sysctl.d/90-max_map_count.conf

- name: Apply changes for the limit in mmpa counts
  become: true
  ansible.builtin.command: sudo sysctl --system

- name: Create application directory
  become: true
  ansible.builtin.file:
    path: /opt/mastodon
    state: directory
    recurse: true # This allows the creation of the parent directories if they don't exist

- name: Create directories related to database operations (PostgreSQL)
  become: true
  ansible.builtin.file:
    path: /opt/mastodon/database/postgresql
    state: directory
    recurse: true

- name: Create directories related to database operations (Redis)
  become: true
  ansible.builtin.file:
    path: /opt/mastodon/database/redis
    state: directory
    recurse: true

- name: Create directories related to database operations (elasticsearch)
  become: true
  ansible.builtin.file:
    path: /opt/mastodon/database/elasticsearch
    state: directory
    mode: 1000 # This changes the permissions in the directory
    recurse: true

- name: Create directories related to web operations (public).
  become: true
  ansible.builtin.file:
    path: /opt/mastodon/web/public
    state: directory
    mode: 991
    recurse: true

- name: Create directories related to web operations (system).
  become: true
  ansible.builtin.file:
    path: /opt/mastodon/web/system
    state: directory
    mode: 991
    recurse: true

- name: Copy docker-compose file into the corresponding system directory
  become: true
  ansible.builtin.template:
    src: ../templates/docker-compose_template.j2
    dest: /opt/mastodon/docker-compose.yml

- name: Generate secrets
  ansible.builtin.include_tasks: secrets_config.ansible.yml
  when: mastodon_generate_secrets

- name: Generate database URL
  become: true
  ansible.builtin.set_fact:
    database_url: "postgres://mastodon:{{ postgresql_secret.stdout_lines[0] }}@postgresql:5432/mastodon_production"
  when: mastodon_generate_secrets

- name: Generate application.env file based on template
  become: true
  ansible.builtin.template:
    src: ../templates/application_template.j2
    dest: /opt/mastodon/application.env
    mode: 600
  when: mastodon_generate_secrets

- name: Generate database.env file based on template
  become: true
  ansible.builtin.template:
    src: ../templates/database_template.j2
    dest: /opt/mastodon/database.env
    mode: 600
  when: mastodon_generate_secrets

- name: Create temporary volume
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker volume create --opt type=none --opt device=/opt/mastodon/web/public --opt o=bind temporary_static'
  # community.docker.docker_volume:
  #   name: temporary_static
  #   state: present
  #   driver_options:
  #     type: none
  #     device: /opt/mastodon/web/public
  #     o: bind

- name: Create container to copy static files
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker run --rm -v "temporary_static:/static" tootsuite/mastodon:v4.0.2 bash -c "cp -r /opt/mastodon/public/* /static/"'
  # community.docker.docker_container:
  #   name: temporary_container
  #   image: tootsuite/mastodon:v4.0.2
  #   volumes:
  #     - /temporary_static:/static
  #   state: started
  #   # container_default_behavior: compatibility
  #   # command: cp -r /opt/mastodon/web/public/* /static/
  #   detach: true
  #   # auto_remove: true

# - name: Copy static files
#   become: true
#   community.docker.docker_container_exec:
#     container: temporary_container
#     command: "/bin/bash cp -r /opt/mastodon/web/public/* /static/"

- name: Remove temporary volume
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker volume rm temporary_static'
  # community.docker.docker_volume:
  #   name: temporary_static
  #   state: absent

- name: Disable default virtual host
  become: true
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Create sites-enabled directory again
  become: true
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled
    state: directory
    recurse: true

- name: Create a directory for SSL certificates
  become: true
  ansible.builtin.file:
    path: /etc/nginx/ssl
    state: directory
    recurse: true

- name: Create certificate and private key for Nginx # Still need to define certain configuration values for this meanwhile we'll use simple command.
  become: true
  ansible.builtin.command:
    cmd: 'sudo openssl req -subj "/commonName=example.org/" -x509 -nodes -days 730 -newkey rsa:2048 -keyout /etc/nginx/ssl/{{ mastodon_server_hostname }}.key -out /etc/nginx/ssl/{{ mastodon_server_hostname }}.crt'
  when: mastodon_generate_secrets

- name: Create virtual host
  become: true
  ansible.builtin.template:
    src: ../templates/mastodon_nginx_config.j2
    dest: /etc/nginx/sites-available/mastodon
  when: mastodon_generate_secrets

- name: Enable virtual host # Should try to do it with ansible.builtin.file
  become: true
  ansible.builtin.command:
    cmd: 'sudo ls -s /etc/nginx/sites-available/mastodon /etc/nginx/sites-enabled'

- name: Restart web server
  become: true
  ansible.builtin.systemd_service:
    name: nginx
    state: restarted

- name: Pull docker-compose images
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker-compose -f /opt/mastodon/docker-compose.yml pull'

- name: Create mastodon service file
  become: true
  ansible.builtin.copy:
    src: ../files/mastodon.service
    dest: /etc/systemd/system/mastodon.service

- name: Reload daemons
  become: true
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Start postgresql database and pgbounce
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker-compose -f /opt/mastodon/docker-compose.yml up -d postgresql redis redis-volatile'

- name: Check for database creation
  become: true
  ansible.builtin.shell:
    cmd: 'sudo docker-compose -f /opt/mastodon/docker-compose.yml ps | grep mastodon_shell_1 | wc -l'
  register: database_created

# We have to check whether the database has been created already or not to avoid having a failure when installing it.
- name: Start database using shell container
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker-compose -f /opt/mastodon/docker-compose.yml run --rm shell bundle exec rake db:setup'
  when: database_created.stdout == "0"

- name: Start and enable service
  become: true
  ansible.builtin.command:
    cmd: 'sudo systemctl enable --now mastodon.service'

- name: Create user
  become: true
  ansible.builtin.command:
    cmd: 'sudo docker-compose -f /opt/mastodon/docker-compose.yml run --rm shell bin/tootctl accounts create milosz --email nonexistingmilosz@google.com --confirmed --role Owner'
